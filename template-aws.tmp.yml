AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectId:
    Default: aws-util
    Type: String
    Description: providing aws utilities

Resources:
  SchedulingEngineApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/functions.dashboard
      Runtime: nodejs14.x
      CodeUri: ./
      MemorySize: 2048
      Timeout: 300

      Environment:
        Variables:
          NODE_ENV: production
          CODE_ENV: development
          APP_NAME: scheduling

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: get
        PostEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: post
        DeleteEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: delete
        OptionsEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: options

  DashboardApiGW:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          '/':
            x-amazon-apigateway-any-method:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Max-Age: "'172800'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
          '/{proxy+}':
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Max-Age:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Max-Age: "'172800'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardApi.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardApi.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardApi.Arn}/invocations
              responses: {}

  DashboardApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/functions.dashboardHandler
      Runtime: nodejs14.x
      CodeUri: ./
      MemorySize: 2048
      Timeout: 30

      Environment:
        Variables:
          NODE_ENV: production
          CODE_ENV: development
          APP_NAME: dashboard

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: get
            RestApiId:
              Ref: DashboardApiGW
        PostEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: post
            RestApiId:
              Ref: DashboardApiGW
        DeleteEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: delete
            RestApiId:
              Ref: DashboardApiGW
        OptionsEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: options
            RestApiId:
              Ref: DashboardApiGW
